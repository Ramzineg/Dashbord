import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import plotly.express as px
import requests
import streamlit as st
# Fetch data from the COVID-19 API
url = 'https://api.covid19api.com/total/country/germany'
response = requests.get(url)

# Convert the response to a Pandas DataFrame
data = pd.json_normalize(response.json())

# Clean the data by removing irrelevant columns and duplicates
data = data[['Confirmed', 'Deaths', 'Recovered', 'Active', 'Date']]
data = data.drop_duplicates()
# Normalize and scale the numerical data
data[['Confirmed', 'Deaths', 'Recovered', 'Active']] = (data[['Confirmed', 'Deaths', 'Recovered', 'Active']] - data[['Confirmed', 'Deaths', 'Recovered', 'Active']].mean()) / data[['Confirmed', 'Deaths', 'Recovered', 'Active']].std()
fig = px.scatter_matrix(data, dimensions=['Confirmed', 'Deaths', 'Recovered', 'Active'], color='Active')
st.plotly_chart(fig)

# Create a line chart to visualize the trend of the confirmed cases over time
fig = px.line(data, x='Date', y='Confirmed')
st.plotly_chart(fig)
X = data[['Confirmed', 'Deaths', 'Recovered']]
y = data['Active']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Calculate the mean squared error and R^2 score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
# Create a form to input data
st.write('### Input Data')
confirmed = st.number_input('Confirmed Cases')
deaths = st.number_input('Deaths Cases')
recovered = st.number_input('Recovered Cases')
input_data = np.array([[confirmed, deaths, recovered]])

# Make predictions using the model
prediction = model.predict(input_data)

# Display the prediction
st.write('### Prediction')
st.write('Active Cases:', round(prediction[0]))
